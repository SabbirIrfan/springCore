

*** caps_lock as the home button *** )))
why spring core?
<It is one of very few projects that can claim clean
code structure with no circular dependencies between packages.>
<making APIs that are intuitive and that hold up across many versions and ma>
<Provide choice at every level. Spring lets you defer design decisions as late as possible>
<Maintain strong backward compatsions. Spring supports a carefully chosen range of JDK
 versions and third-party libraries to facilitate maintenance>
<Accommodate diverse perspective>




Meaning of the simble:
**  :: notes and key points about spring core
## ::  notes and key points involving outside the scope of spring core
%%%%:: section
%>> :: subsection

@@:: java core key notes ::@@

%%%%lifecycle of spring bean::%%%%

property setting::
init()::
read and use of the spring bean
destroy()

**public void init() >> name can be anything but the signature must be like this.
**public void destroy() >>  name can be anything but the signature must be like this.
**to destroy we use a method form "AbstractApplicationContex" called registeringShutdownHook();
##
### difference between servlet and bean::
##servlet first init() and then loads the property
##but bean first does the property setting then loads the init()
##
%%%% BEAN %%%%
**bla bla bla**

**HANDLING THE NESTED CLASS(static)**
** if a class someThing has a nested static class otherThing then >>
** to create the bean of the class we have to provide the
***>> Class= com.example.SomeThing$OtherThing or com.example.SomeThing.OtherThing

$$$$$$$$$$DOC$$$$$$$$$$$
Nested class names
If you want to configure a bean definition for a nested class, you may use either the binary
name or the source name of the nested class.
For example, if you have a class called SomeThing in the com.example package, and this
SomeThing class has a static nested class called OtherThing, they can be separated by a dollar
sign ($) or a dot (.). So the value of the class attribute in a bean definition would be
com.example.SomeThing$OtherThing or com.example.SomeThing.OtherThing.
$$$$$$$$$$DOC$$$$$$$$$$$

%>> ::using XML

**
**inside bean <bean> we need to define the init method and destroy method  using "init-method" and "destroy-method"
**the signature must be same but the name can changed and provided in the bean configuration

@@:: interface can inherit multiple INTERFACE (not calss ) ::@@

%>> :: lifeCycle implementation using Interface
** we need initializingBean and DisposableBean
** need to implement the InitializingBean and DisposableBean interface to bean class
** and override the afterPropertiesSet() and destroy() method
**** multiple bean calling:: the oder of lifcycle will be maintained but the order of bean may overlap each other
**** In Spring, if beans have no explicit dependencies, their init() methods run independently during container initialization, and the execution order is not guaranteed.


%%% ApplicationContext %%%
** subclass of BeanFactory which The root interface for accessing a Spring bean container.
** adds more enterprise-specific functionality.

%>> :: lifeCycle implementation using annotation
** @Postconstruct @PreDestroy
*** ::Note:: they are depricated after java 9 so for them to work we need to add DEPENDENCY of java.annotation-api ::NOTE::
*** ::Note:: we need to use <context : annotation-config /> tag ...because they are disabled by default ::Note::


%%%% Autowiring in Spring ::%%%%
** feature of spring frame work  which injects the dependency AUTOMATICALLY
**it works with reference only >> so the primitive data types and string values can't be used
** modes are :: (1) no mode (2) byName (3) byType (4) byType (5) constructor (6) autodetect { depricated since spring 3}
** Annotation >> @Autowired

%>> :: Annotation >> @Autowired
** constructor() @Autowired
** property @Autowired
** setterMethod() @Autowired
***** recommended >> name property shall be (not necessary) same as the object name in the Dependency Injection.

%>> :: @Qualifier("name of the bean ")
** used with the @Autowired
** and can fix the conflict of the bean with name property.

%%% StandAlone Collection %%%
<util:list list-class = "java.util.LInkedList" id = "to use as a ref in other bean">
<util: map class="" id="">
<util:properties id="">  // no class needed//

%%%Stereotype Annotaion%%%
** @component("name of the bean") >> parameter is optional
%>> SpEL >> @Value("#{Expression}")
** @Value("value ") is used to set the variable
** @Value(#{Collection})  >> collection has to be added in the xml file with standalone Utill or the other way


** default scope is SingleTone
** we can change it to prototype by adding scope="" attribute with the @component

%%%@Component%%%
** use case 1: make config.xml where we give the base class. and add @Component over the class we want the bean of
%%%Configuration%%%
*** use case 2: delete the config.xml and create config.java and use @Configuration and @ComponentScan
***************ApplicationContext context = new AnnotationConfigApplicationContext("org.example.config.class");

%%% @Bean %%%
** removing @componentScan annotation and using @Bean annotation for methods ...


%%% what is JDBC %%%
**its  API to perform operations with database.
** spring jdbc provides jdbc template

**JDBC template method
** update() -> insert, update, delete
** execute() -> select queries >> returns a ResultSet

%%% queryForObject(String sql, RowMapper<T> rowMapper, Object args)%%%
%%% RowMapper>> it converts the resultSet into object of every row fof the entity used in the implementation of row mapper

*** RowMapper is a FunctionalInterface ***